container worldbank_tabulation {
	
	unit<dpoint> w_mw:= range(Geography/Base, point(-18040095.7, -9020047.85), point(18040095.7, 9020047.85)), Descr = "Mollweide Global Projection",	Format = "ESRI:54009";
	unit<dpoint> WGS84:= range(Geography/Base, point(-90.0, -180.0), point(90.0, 180.0)), Descr = "WGS 1984",	Format = "EPSG:4326";
	unit<wpoint> target_grid:= population_data/observed/ghsl_2020 {
		attribute<famine_data/fews_famines> fews_id:= poly2grid(famine_data/fews_famines/Geometry,.);
	}
	
	unit<uint32> adm_units: nrofrows = 6 {attribute<string> LabelText:= 'adm_'+string(id(.));}
	unit<uint32> p5s: NrOfRows = 20 {
		attribute<string> LabelText:= 'pc'+string(5*(id(.)+1));
		attribute<float32> sc_mobs14t21:=		ClassifyEqualCount(sel_countries/m_obs_14t21, p5s);
		attribute<float32> sc_ipc3plus_pct:=	ClassifyEqualCount(famine_data/fews_famines/ipc3plus_percent, p5s);
	}
	
	unit<uint32> degurba: NrOfRows = 3 {
		attribute<uint8>   class_start: [0, 20, 30];
		attribute<string>  LabelText: ['Rural', 'Towns and suburbs', 'Cities'];
	}
	
	unit<uint32> sel_countries:= subset(IsDefined(Countries/m_obs_14t21) || Countries/ISO3 = 'ESH'), Descr = "All countries for which food insecurity data is available (not FEWS but globally), and also including Western Sahara" {
		attribute<string> 	LabelText:= Countries/LabelText[Nr_Orgentity];
		attribute<WGS84>  	Geometry (polygon):= Countries/Geometry[Nr_Orgentity];
		attribute<float32>	m_obs_14t21:= Countries/m_obs_14t21[Nr_Orgentity];
		attribute<p5s> 		p5_class:= classify(m_obs_14t21, p5s/sc_mobs14t21);
		attribute<float32>	p2010_WDI:= float32(rjoin(Nr_Orgentity,population_data/observed/WDI_country_population/cntr_id, population_data/observed/WDI_country_population/y2010));
	}
	unit<uint32> regions:= famine_data/fews_zones;
	
	unit<uint32> countries:= RegionalUnits/Countries {
		attribute<famine_data/severely_food_insecure_default_scenario> fi_id:= invert(/famine_data/severely_food_insecure_default_scenario/cntr_id);
		attribute<string> LabelText:= label;
		attribute<float32> m_obs_14t21:= famine_data/severely_food_insecure_default_scenario/m_obs_14t21[fi_id];
		attribute<float32> hm_obs_14t21:= famine_data/severely_food_insecure_default_scenario/hm_obs_14t21[fi_id];
		attribute<float32> gm_obs_14t21:= famine_data/severely_food_insecure_default_scenario/gm_obs_14t21[fi_id];
		
		attribute<uint32>  n_fews:= pcount(famine_data/fews_famines/cntr_id);
		attribute<float32> pop2020:= sum(famine_data/fews_famines/pop2020, famine_data/fews_famines/cntr_id);
		
		// analysing ipcs 
		attribute<float32>	exp_ipc3plus:= sum(famine_data/fews_famines/ipc3plus_exposure, famine_data/fews_famines/cntr_id) / pop2020;
		//attribute<float32>	hm_exp_ipc3plus:= (pop2020 / sum(makedefined(famine_data/fews_famines/pop2020 / (famine_data/fews_famines/ipc3plus_notexposed), 0f), famine_data/fews_famines/cntr_id) / pop2020);
		attribute<float32>	m_avg_ipc:= mean(famine_data/fews_famines/avg_ipc, famine_data/fews_famines/cntr_id);
		attribute<float32>  pm_avg_ipc:= sum(famine_data/fews_famines/avg_ipc * famine_data/fews_famines/pop2020, famine_data/fews_famines/cntr_id) / sum(famine_data/fews_famines/pop2020, famine_data/fews_famines/cntr_id);
		attribute<float32>	m_ipc3plus:= 1f - mean(famine_data/fews_famines/w_below_ipc3plus_percent, famine_data/fews_famines/cntr_id);
		//attribute<float32>	hm_ipc3plus:= 1f - ((1f / mean(makedefined(1f / famine_data/fews_famines/below_ipc3plus_percent, 0f), famine_data/fews_famines/cntr_id)));
		attribute<float32>	hm_ipc3plus:= 1f - ((1f / mean((1f / famine_data/fews_famines/w_below_ipc3plus_percent), famine_data/fews_famines/cntr_id)));
		attribute<float64>	gm_ipc3plus:= 1d - (exp(sum(log(float64(famine_data/fews_famines/w_below_ipc3plus_percent)), famine_data/fews_famines/cntr_id))^(1d / float64(n_fews)));
		//attribute<float32>	hm_ipc3plus:= (float32(pcount(famine_data/fews_famines/cntr_id)) / sum(famine_data/fews_famines/ipc3plus_percent, famine_data/fews_famines/cntr_id));
		attribute<float32>	corr_ipc_3_ipc4p:= corr(float32(famine_data/fews_famines/ipc_3), float32(famine_data/fews_famines/ipc_4 + famine_data/fews_famines/ipc_5), famine_data/fews_famines/cntr_id);
		attribute<bool>		ipc_events:= sum(famine_data/fews_famines/avg_ipc, famine_data/fews_famines/cntr_id) > 0f;
		
		// for joining degrees of urbanisation
		//attribute<uint32> 	smallest_admx_n:= ='argmax('+asItemList('nr_admx/'+adm_units/LabelText)+')';
		
		
		container nr_admx:= for_each_nedv(adm_units/LabelText, 'pcount(gadm_adm_zones/'+adm_units/LabelText+'/cntr_id)', countries, uint32);
		
		/*unused
			attribute<float32>	avg_prob_ipc_score:= mean(famine_data/fews_famines/prob_ipc_score, famine_data/fews_famines/cntr_id);
			attribute<float32>	prob_ipc_75th_perc:= rth_element(famine_data/fews_famines/prob_ipc_score, 0.75f, famine_data/fews_famines/cntr_id);
			attribute<bool>  	prob_ipc_events:= sum(famine_data/fews_famines/prob_ipc_score, famine_data/fews_famines/cntr_id) > 0f;
			attribute<bool>		prob_ipc_75th_distinctive:= prob_ipc_75th_perc > rth_element(famine_data/fews_famines/prob_ipc_score, 0.25f, famine_data/fews_famines/cntr_id);
		*/
	}
	
	container Geography {
		unit<dpoint>  Base: Format     = "EPSG:4326" {
			parameter<float32> ViewPortMinSize: expr = "float32(100)	/ float32(3600 * 4)";
			parameter<float32> PenWorldWidth: 	expr = "float32(1) 		/ float32(3600 * 4)", 	DialogType = "PenWorldWidth";
			parameter<float32> SymbolWorldSize: expr = "float32(2)	 	/ float32(3600)",	DialogType = "SymbolWorldSize";
			parameter<float32> LabelWorldSize: 	expr = "float32(10) 	/ float32(3600)",	DialogType = "LabelWorldSize";
		}
	}
	#include<RegionalUnits.dms>
	
	container famine_data {
		
		unit<uint32> fews_zones:= fews_zones_LL {
			attribute<w_mw>  Geometry (poly):= Geometry_LL[w_mw];
			attribute<WGS84>   Geometry_LL (poly):= fews_zones_LL/Geometry;
			attribute<string> LabelText:= admin_name;
			attribute<string> adm0_name:= fews_zones_LL/adm0_name;
			attribute<countries>	cntr_id:= rlookup(adm0_name, countries/label);
			attribute<fews_famines> ff_id:= invert(fews_famines/fz_id);
			attribute<float32>		ipc3plus_percent:= fews_famines/ipc3plus_percent[ff_id];
			attribute<p5s>		 	p5_class_gen:= classify(ipc3plus_percent, p5s/sc_ipc3plus_pct);
			attribute<p5s>		 	p5_class_ctr:= fews_famines/country_classification[ff_id];
		}
		unit<uint32> fews_zones_LL: storagename = "%ProjDir%/data/admin_units/FEWS_Admin_LZ_v3.shp", storagetype = "gdal.vect", storagereadonly = "true" {
			attribute<WGS84>   Geometry (poly);
			attribute<string> admin_name;
		}
		unit<uint32> fews_famines: storagename = "%ProjDir%/data/famine_data/fews_frequency_upd_oct23_after2014.csv", storagetype = "gdal.vect", storagereadonly = "true" {
			attribute<fews_zones> fz_id:= rlookup(uint64(admin_code), uint64(fews_zones/admin_code));
			attribute<w_mw>		Geometry (poly):= fews_zones/Geometry[fz_id];
			attribute<countries> 	cntr_id:= fews_zones/cntr_id[fz_id];
			//attribute<uint32> 		timesteps;
			attribute<uint32>		ipc_1;
			attribute<uint32>		ipc_2;
			attribute<uint32>		ipc_3;
			attribute<uint32>		ipc_4;
			attribute<uint32>		ipc_5;
			attribute<uint32>		ipc_3_plus;
			attribute<uint32>		nr_ipc:= makedefined(ipc_1,0) + makedefined(ipc_2,0) + makedefined(ipc_3,0) + makedefined(ipc_4,0) + makedefined(ipc_5,0);
			attribute<float32>		avg_ipc:= float32(makedefined(ipc_1,0) + (2 * makedefined(ipc_2,0)) + (3 * makedefined(ipc_3,0)) + (4 * makedefined(ipc_4,0)) +  (5 * makedefined(ipc_5,0))) / float32(nr_ipc);
			attribute<float32> 		pop2020:= sum(population_data/observed/ghsl_2020/Pop, target_grid/fews_id);
			attribute<float32>		region_pop_weight:= MakeDefined(pop2020 / (countries/pop2020 / float32(countries/n_fews))[cntr_id], 1f);
			attribute<p5s> 			country_classification:= rjoin(id(.), country_classifications/collection/orgid, country_classifications/collection/class);
			
			// prob_ipc score not very interesting
			//attribute<float32>		prob_ipc_score:= float32((3 * ipc_3) + (4 * ipc_4) +  (5 * ipc_5)) / float32(ipc_3 + ipc_4 + ipc_5);
			//attribute<float32> 		rescaled_prob_ipc_score:= prob_ipc_score / countries/avg_prob_ipc_score[cntr_id];
			//attribute<bool>			in75th_perc:= prob_ipc_score >= countries/prob_ipc_75th_perc[cntr_id];
			
			attribute<float32> 		ipc3plus_percent:= makedefined(float32(ipc_3_plus) / float32(nr_ipc), 0f);
			attribute<float32> 		below_ipc3plus_percent:= 1f - ipc3plus_percent;
			attribute<float32> 		w_below_ipc3plus_percent:= region_pop_weight * below_ipc3plus_percent;
			attribute<float32> 		ipc3plus_exposure:= pop2020 * ipc3plus_percent;
			attribute<float32> 		ipc3plus_notexposed:= pop2020 * below_ipc3plus_percent;
			
			//attribute<float32> sc_ipc3plus_pct:=	ClassifyEqualCount(famine_data/fews_famines/ipc3plus_percent, p5s);
			
			container classify_per_country_ipc3plus:= for_each_nedv(fews_covered_countries/ZoneId, 'ClassifyEqualCount((cntr_id = '+string(fews_covered_countries/Nr_Orgentity)+' ? ipc3plus_percent : float32(0 / 0)), p5s)', p5s, float32);
			container classify_per_country_avgipc:= for_each_nedv(fews_covered_countries/ZoneId, 'ClassifyEqualCount((cntr_id = '+string(fews_covered_countries/Nr_Orgentity)+' ? avg_ipc : float32(0 / 0)), p5s)', p5s, float32);
			
			container country_classifications:= for_each_ne(fews_covered_countries/ZoneId, 'fetch_percentiles('+string(fews_covered_countries/Nr_Orgentity)+')') {
				unit<uint32> collection:= ='union_unit('+AsItemList(fews_covered_countries/ZoneId+'/country_fews')+')' {
					attribute<fews_famines> orgid:= ='union_data(.,'+AsItemList(fews_covered_countries/ZoneId+'/country_fews/Nr_Orgentity')+')';
					attribute<p5s> class:= 			='union_data(.,'+AsItemList(fews_covered_countries/ZoneId+'/country_fews/class')+')';
				}
			}
			
			Template fetch_percentiles {
				parameter<countries> inCountry;
				parameter<string> ZoneId:= countries/ZoneId[inCountry];
				parameter<bool> use_ipc3plus:= !(uppercase(ZoneId) = 'YEM' || uppercase(ZoneId) = 'CMR' || uppercase(ZoneId) = 'BFA');
				
				unit<uint32> country_fews:= subset(fews_famines/cntr_id = inCountry) {
					attribute<float32> ipc3plus_percent:= fews_famines/ipc3plus_percent[Nr_Orgentity];
					attribute<float32> avg_ipc:= fews_famines/avg_ipc[Nr_Orgentity];
					attribute<p5s> 	class:= = use_ipc3plus ? 'classify(ipc3plus_percent, classify_per_country_ipc3plus/'+ZoneId+')' : 'classify(avg_ipc, classify_per_country_avgipc/'+ZoneId+')';
				}
			
			}
		}
		unit<uint32> fews_covered_countries:= subset(pcount(fews_famines/cntr_id) > 0) {
			attribute<string> 	LabelText:= countries/LabelText[Nr_Orgentity];
			attribute<string> 	ZoneId:= countries/ZoneId[Nr_Orgentity];
			attribute<float32> 	avg_nr_ipc:= rjoin(Nr_Orgentity, id(Countries), mean(float32(fews_famines/nr_ipc), fews_famines/cntr_id));
			attribute<float32> 	min_nr_ipc:= rjoin(Nr_Orgentity, id(Countries), min(float32(fews_famines/nr_ipc), fews_famines/cntr_id));
			attribute<float32> 	max_nr_ipc:= rjoin(Nr_Orgentity, id(Countries), max(float32(fews_famines/nr_ipc), fews_famines/cntr_id));
		}
		unit<uint32> severely_food_insecure_default_scenario: storagename = "%ProjDir%/data/famine_data/wb_food_insecurity_national_prevalence_apr23.csv"
			, storagetype = "gdal.vect", storagereadonly = "true"
			, descr = "3-year centered averages of the prevalence of severe food insecurity (rate), april 2023, from Andree, B.P.J. (2022). Machine Learning Guided Outlook of Global Food Insecurity Consistent with Macroeconomic Forecasts"		
			{
				attribute<countries> cntr_id:= rlookup(GADM_CTR, countries/LabelText);
				attribute<string> 	LabelText:= GADM_CTR;
				attribute<float32>  sum_obs_14t21:= add(float32(obs_14t16),float32(obs_15t17),float32(obs_16t18),float32(obs_17t19),float32(obs_18t29),float32(obs_19t21));
				attribute<float32>  m_obs_14t21:= sum_obs_14t21 / 6f;
				attribute<float32>  hm_obs_14t21:= 6f / add(1f / float32(obs_14t16),1f / float32(obs_15t17),1f / float32(obs_16t18),1f / float32(obs_17t19),1f / float32(obs_18t29),1f / float32(obs_19t21));
				attribute<float32>  gm_obs_14t21:= exp(add(log(float32(obs_14t16)),log(float32(obs_15t17)),log(float32(obs_16t18)),log(float32(obs_17t19)),log(float32(obs_18t29)),log(float32(obs_19t21))))^(1f / 6f);
				
				
			}
			
		
	}
	container population_data {
		
		container observed {
			
			unit<uint32> WDI_country_population: storagename = "%ProjDir%/data/population/observed/WDI_world_countries_population.csv"
			, storagetype = "gdal.vect", storagereadonly = "true"
			, descr = "National population counts in 2010, 2015, 2020, according to the World Development Indicators database (https://databank.worldbank.org/reports.aspx?source=2&series=SP.POP.TOTL&country=#). 
				Some GID codes adapted manually, and China, Hong Kong and Macao populations added together for China"		
			{
				attribute<countries> cntr_id:= rlookup(Country_Code, countries/ZoneId);
				attribute<string> 	LabelText:= Country_Name;
				attribute<uint32> y2010;
				attribute<uint32> y2015;
				attribute<uint32> y2020;
			}
			
			unit<wpoint> ghsl_2020: storagename = "%ProjDir%/data/population/observed/GHS_POP_E2020_GLOBE_R2023A_54009_1000_V1_0.tif", storagereadonly = "true", storagetype = "gdal.grid", dialogdata = "w_mw" {
				attribute<float32> GridData;
				attribute<float32> ReadData (target_grid);
				attribute<float32> Pop  (target_grid):= max_elem(ReadData, 0f);
			}
		}
		// !!!!!!!! need to scale modelled population projections by official UN population estimates (most recent)
		container modelled {
			
			/*parameter<LambertEA> Origin: Expr = "point(1500000.0, 900000.0,  LambertEA)"; // Left-Bottom coord
		parameter<LambertEA> Extent: Expr = "point(6000000.0, 4530000.0, LambertEA)";

		parameter<LambertEA> LeftBottom: Expr = "Origin";
		parameter<LambertEA> LeftTop:    Expr = "point(pointcol(Origin), pointrow(Origin) + pointrow(Extent), LambertEA)";*/
			
			unit<wpoint> r2up:= /population_data/modelled/ModelResults/SSP1_2010/inFile {
				attribute<sel_countries> scntr_id:= poly2grid(sel_countries/Geometry, .);
				attribute<regions> 		 reg_id:= poly2grid(regions/Geometry_LL, .);
				attribute<rf10>			 rf10_id:= id(.)[rf10];
			}
			unit<wpoint> rf10:= range(
				gridset(WGS84, getProjectionFactor(r2up) * point(10d, 10d, WGS84), getProjectionOffSet(r2up), wpoint),
				point(uint16(0), uint16(0)),
				wpoint(boundrange(r2up) / point(uint16(10), uint16(10), wpoint)));
			/*unit<wpoint> m1000:
			Expr  =
				"range("
					"gridset(LambertEA, "
						"point(1000.0, -1000.0, LambertEA), "
						"LeftTop, "
						"wpoint"
					"), "
					"Point(UInt16(0),UInt16(0)),"
					"WPoint(Extent  / point(1000.0, 1000.0, LambertEA))"
				")"*/
			container ModelResults:= for_each_ne(SSP_x_Years/Label, 'doLoadPopTiffs('+string(id(SSP_x_Years))+')') {
				container RefYears_per_SSP:= for_each_nedv(SSPs/Label, SSPs/Label+'_2010/inFile/Pop', r2up, float32);
				container CountrySums_per_SSP:= for_each_nedv(SSPs/Label, 'sum(RefYears_per_SSP/'+SSPs/Label+', r2up/scntr_id)', sel_countries, float32);
				container CountryModifier:= for_each_nedv(SSPs/Label, 'makedefined(sel_countries/p2010_WDI / CountrySums_per_SSP/'+SSPs/Label+', 1f)', sel_countries, float32);
				container Inform_Factors:= for_each_nedv(SSP_x_Years/Label, 'sum(ModelResults/'+SSP_x_Years/Label+'/inFile/pop, r2up/scntr_id) / CountrySums_per_SSP/'+SSP_x_Years/SSP, sel_countries, float32);
				container RF10_RefYears:= for_each_nedv(SSPs/Label, 'mean(RefYears_per_SSP/'+SSPs/Label+', r2up/rf10_id)[r2up/rf10_id]', r2up, float32);
				container RF10_Sums_per_SSP:= for_each_nedv(SSPs/Label, 'sum(RF10_RefYears/'+SSPs/Label+', r2up/scntr_id)', sel_countries, float32);
				container RF10_Factors:= for_each_nedv(SSP_x_Years/Label, 'sum(ModelResults/'+SSP_x_Years/Label+'/inFile/pop, r2up/scntr_id) / RF10_Sums_per_SSP/'+SSP_x_Years/SSP, sel_countries, float32);
			}
			container RescaledModelResults:= for_each_nedv(SSP_x_Years/Label, 'ModelResults/'+SSP_x_Years/Label+'/inFile/pop * ModelResults/CountryModifier/'+SSPs/Label[SSP_x_Years/first_rel]+'[r2up/scntr_id]', r2up, float32);
			container RescaledModelResults_Urb:= for_each_nedv(SSP_x_Years/Label, 'RescaledModelResults/'+SSP_x_Years/Label+' * ModelResults/'+SSP_x_Years/Label+'/urb_infile/urb', r2up, float32);
			container RescaledModelResults_INFORM_method:= for_each_nedv(SSP_x_Years/Label, 'RescaledModelResults/'+SSP_x_Years/SSP+'_2010 * ModelResults/Inform_Factors/'+SSP_x_Years/Label+'[r2up/scntr_id]', r2up, float32);
			container RescaledModelResults_km10_grids:= for_each_nedv(SSP_x_Years/Label, 'ModelResults/RF10_RefYears/'+SSP_x_Years/SSP+' * ModelResults/RF10_Factors/'+SSP_x_Years/Label+'[r2up/scntr_id] * ModelResults/CountryModifier/'+SSPs/Label[SSP_x_Years/first_rel]+'[r2up/scntr_id]', r2up, float32);
			container d_Rescaled_INFORM:= for_each_nedva(SSP_x_Years/Label, 'RescaledModelResults_INFORM_method/'+SSP_x_Years/Label+' - RescaledModelResults/'+SSP_x_Years/Label, r2up, float32, '%LocalDataProjDir%/d_2up_inform/'+SSP_x_Years/Label+'.tif');
			container d_Rescaled_km10:= for_each_nedva(SSP_x_Years/Label, 'RescaledModelResults_km10_grids/'+SSP_x_Years/Label+' - RescaledModelResults/'+SSP_x_Years/Label, r2up, float32, '%LocalDataProjDir%/d_2up_rf10/'+SSP_x_Years/Label+'.tif');
						
			unit<uint32> SSPs: nrofrows = 5 {attribute<string> Label:= 'SSP'+string(id(.)+1);}
			unit<uint32> Years:= range(uint32, 0, (2100 - 2000) / 10) {attribute<uint32> Year:= 2000 + 10 + (id(.) * 10);attribute<string> Label:= 'y'+string(Year);}
			unit<uint32> SSP_x_Years:= combine(SSPs, Years) {attribute<string> SSP:= SSPs/Label[first_rel]; attribute<string> Label:= SSP+'_'+string(Years/Year[second_rel]);} // M3var1_SSP1_2010_tpop
			
			Template doLoadPopTiffs {
				parameter<SSP_x_Years> in_sy;
				
				unit<wpoint> infile: storagename = "= '%ProjDir%/data/population/TowardsAnUrbanPreview_cal21_PD8048_2UPSD8013_FP05_7318/M3var1_'+SSP_x_Years/Label[in_sy]+'_tpop.tif'", storagereadonly = "True", dialogdata = "WGS84" {
					attribute<float32> GridData;
					attribute<float32> ReadData (r2up);
					attribute<float32> Pop  (r2up):= max_elem(ReadData, 0f);
					attribute<float32> UrbPop (r2up):= Pop * urb_infile/urb;
				}
				unit<wpoint> urb_infile: storagename = "= '%ProjDir%/data/population/TowardsAnUrbanPreview_cal21_PD8048_2UPSD8013_FP05_7318/urb/M3var1_'+SSP_x_Years/Label[in_sy]+'_urb.tif'", storagereadonly = "True", dialogdata = "WGS84" {
					attribute<bool> GridData;
					attribute<bool> ReadData (r2up);
					attribute<float32> urb (r2up):= float32(ReadData);
				}
			}
		}
	
	}
	
	container climate_data {
		
		unit<wpoint> r2up:= population_data/modelled/r2up;
		
		unit<ipoint> tropical_nights_ec_ssp: storagename="%ProjDir%/data/climate_projections/copernicus_test/trETCCDI_yr_EC-Earth3_ssp370_r15i1p1f1_no-base_v20200201_2015-2100_v2-0.nc", storagetype = "gdal.grid", storagereadonly = "true", dialogdata = "WGS84" {
			attribute<float32> GridData;
			attribute<dpoint>  init_coords:= id(.)[WGS84];
			attribute<WGS84>   Coords:= pointcol(id(.)[WGS84]) <= 180d ? id(.)[WGS84] : id(.)[WGS84] - point(0d, 360d, WGS84);
			attribute<float32> ReadData (r2up);
			
			parameter<int32> nx2:= pointcol(upperbound(.) - lowerbound(.)) / 2i;
			//parameter<uint32> nx2:= pointcol(boundrange(id(.))) / 2;
			
			unit<ipoint> shifted:= range(gridset(WGS84, GetProjectionFactor(tropical_nights_ec_ssp), GetProjectionOffset(tropical_nights_ec_ssp) - point(0d, 180d, WGS84), wpoint), lowerbound(tropical_nights_ec_ssp), upperbound(tropical_nights_ec_ssp)) {
				attribute<..> ref:= pointcol(id(.)) >= nx2 ? point(pointrow(id(.)), pointcol(id(.)) - nx2, ..) : point(pointrow(id(.)), pointcol(id(.)) + nx2, ..);
				attribute<float32> values:=  GridData[ref];
				attribute<.>  r2up_rel (r2up):= id(r2up)[.];
				attribute<float32> values_r2up (r2up):= values[r2up_rel];
				attribute<float32> critical (r2up):= float32(values_r2up > 180f);
			}
		}
	}
	container hazard_data {
		unit<wpoint> r2up:= population_data/modelled/r2up;
		
		unit<uint32> landslide_risk_class: nrofrows = 6 {
			attribute<float32> val: [1, 2, 3, 4, 254];
			attribute<bool>    incl: [true, true, true, true, false];
			attribute<string>  label: ['ls_none', 'ls_low', 'ls_medium', 'ls_high', 'ls_null'];
			attribute<string>  ref:= 'XXXX/inFile/classified = '+string(id(.));
		}
		unit<uint32> flood_depth_class: nrofrows = 5 {
			attribute<float32> val: [0.001, 1, 2.5, 5, 10];
			attribute<bool>    incl: [true, true, true, true, true];
			attribute<string> label: ['fl_1cmto1m', 'fl_1mto2_5m', 'fl_2_5mto5m', 'fl_5mto10m', 'fl_10mplus'];
			attribute<string>  ref:= 'XXXX/inFile/classified = '+string(id(.));
		}
		unit<uint32> all_hazard_classes:= union_unit(landslide_risk_class, flood_depth_class) {
			attribute<string> label:= union_data(., landslide_risk_class/label, flood_depth_class/label);
			attribute<string> ref:= union_data(., landslide_risk_class/ref, flood_depth_class/ref);
			attribute<bool>   incl:= union_data(., landslide_risk_class/incl, flood_depth_class/incl);
			attribute<string> hazards_ref_attribute:= union_data(., const('landslide_risk_ref',landslide_risk_class,string), const('floods_risk_ref',flood_depth_class,string));
		}
		
		unit<uint32> ssp_x_year:= population_data/modelled/SSP_x_Years {
			attribute<string> landslide_risk_ref:= const(hazardfiles/label[0], ., string);
			attribute<string> floods_risk_ref:= const(hazardfiles/label[1], ., string);
		}
		
		unit<uint32> hazardfiles: nrofrows = 2 {
			attribute<string> label: ['hazard__ls_arup_cjc', 'floodMapGL_rp100y'];
			//attribute<string> risk_eval: ['x > 2f && x < 254f'];
			attribute<string> Descr: ['ARUP landslide hazard 2023', 'EC-JRC GloFAS (2016) m of flooding, 100y return period'];
			attribute<string> ClassUnit: ['landslide_risk_class', 'flood_depth_class'];
		}
		
		container LoadHazards:= for_each_ne(hazardfiles/label, 'doLoadHazards('+string(id(hazardfiles))+','+hazardfiles/ClassUnit+')');
		
		Template doLoadHazards {
			parameter<hazardfiles> in_hz;
			unit<uint32> classes;
			
			unit<wpoint> infile: storagename = "= '%ProjDir%/data/hazards/'+hazardfiles/Label[in_hz]+'.tif'", storagetype = "gdal.grid", storagereadonly = "True", dialogdata = "WGS84" {
				attribute<float32> GridData;
				attribute<float32> ReadData (r2up);
				attribute<float32> x (r2up);
				attribute<classes> classified (r2up):= classify(x, classes/val);
				//attribute<float32> critical  (r2up):= ='float32('+hazards/risk_eval[in_hz] +')';
			}
		
		}
		
		
		
		
		
		
	}
	container overlay_data {
		unit<wpoint> r2up:= population_data/modelled/r2up;
		
		parameter<string> fill:= 'XXXX';
		
		// later extend to automate reading of hazards.
		unit<uint32> sets:= subset(hazard_data/all_hazard_classes/incl) {
			attribute<string> nm:= hazard_data/all_hazard_classes/label[Nr_Orgentity];//,'crit_tr'];
			attribute<string> trunc_nm:= substr(nm, 0, 10);
			attribute<string> ref:= hazard_data/all_hazard_classes/ref[Nr_OrgEntity];
			attribute<string> hazards_ref_attribute:= hazard_data/all_hazard_classes/hazards_ref_attribute[Nr_OrgEntity];
		}
		unit<uint32> sets_x_ssp_x_year:= combine(sets, hazard_data/SSP_x_Year) {
			attribute<string> label:= hazard_data/SSP_x_Year/Label[second_rel] + '_x_'+ sets/nm[first_rel];
			attribute<string> eval:= sets/ref[first_rel];
			attribute<string> location_ref:= ='union_data(., '+asItemList('/hazard_data/ssp_x_year/'+sets/hazards_ref_attribute)+')';
			attribute<string> indirect_ref:= '/hazard_data/LoadHazards/'+replace(eval, fill, location_ref);
		}
		
		unit<wpoint> grids:= r2up {
			attribute<float32> tot:= const(1,.,float32);
			
			container set_grids:= for_each_nedv(sets_x_ssp_x_year/label, 'float32('+sets_x_ssp_x_year/indirect_ref+')', grids, float32);
			container crit_tr:= for_each_nedv(population_data/modelled/Years/Label, const('climate_data/tropical_nights_ec_ssp/shifted/critical',population_data/modelled/Years, string), grids, float32);
		
		}	
		
		/*container load_data {
			unit<wpoint> degurba_grid: storagename = "%ProjDir%/data/degree_of_urbanisation/GHS_SMOD_E2020_GLOBE_R2023A_4326_1000_V1_0_warp_CJC.tif", storagereadonly = "true", storagetype = "gdal.grid", dialogdata = "WGS84" {
				attribute<int16> GridData;
				attribute<int16> ReadData (r2up);
				attribute<degurba> degurba_id (r2up):= classify(ReadData[uint8], degurba/class_start);
			}
		}*/
	}
	container tabulation: using = "population_data/modelled;overlay_data;" {
		
		unit<wpoint> r2up:= overlay_data/r2up;
		
		container gen_results_per_popgrid_tot:= for_each_ne(SSP_x_Years/Label, 'do_tabulate_popresult(RescaledModelResults, '+quote('_totpop')+')');
		container gen_results_per_popgrid_urb:= for_each_ne(SSP_x_Years/Label, 'do_tabulate_popresult(RescaledModelResults_Urb, '+quote('_urbpop')+')');
		container gen_results_per_popgrid_tot_inform:= for_each_ne(SSP_x_Years/Label, 'do_tabulate_popresult(RescaledModelResults_INFORM_method, '+quote('_totpop_inform')+')');
		container gen_results_per_popgrid_tot_rf10:= for_each_ne(SSP_x_Years/Label, 'do_tabulate_popresult(RescaledModelResults_km10_grids, '+quote('_totpop_rf10')+')');
				
		parameter<string> overlays_eval_ctr_tot:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/country_agg_readonly/XXXX)')+')';
		parameter<string> overlays_eval_reg_tot:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/region_agg_readonly/XXXX)')+')';
		parameter<string> overlays_eval_ctr_urb:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_urb/'+SSP_x_Years/Label+'/country_agg_readonly/XXXX)')+')';
		parameter<string> overlays_eval_reg_urb:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_urb/'+SSP_x_Years/Label+'/region_agg_readonly/XXXX)')+')';
		parameter<string> overlays_eval_ctr_tot_inform:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_tot_inform/'+SSP_x_Years/Label+'/country_agg_readonly/XXXX)')+')';
		parameter<string> overlays_eval_reg_tot_inform:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_tot_inform/'+SSP_x_Years/Label+'/region_agg_readonly/XXXX)')+')';
		parameter<string> overlays_eval_ctr_tot_rf10:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_tot_rf10/'+SSP_x_Years/Label+'/country_agg_readonly/XXXX)')+')';
		parameter<string> overlays_eval_reg_tot_rf10:= 'union_data(list_results,'+asItemList('float32(gen_results_per_popgrid_tot_rf10/'+SSP_x_Years/Label+'/region_agg_readonly/XXXX)')+')';
		
		unit<uint32> agg_to_countries:= sel_countries {
			attribute<string> 	LabelText:= sel_countries/LabelText;
			attribute<float32> 	avg_prev_14t21:= sel_countries/m_obs_14t21;
			attribute<p5s>		p5_class:= sel_countries/p5_class;
			attribute<bool> 	p10th_countries:= p5_class < 2[p5s];
			attribute<bool> 	p90th_countries:= p5_class > 17[p5s];
			
			unit<uint32> list_results:= ='union_unit('+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/country_agg_readonly')+')' {
				attribute<string> zoneid:= ='union_data(.,'+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/country_agg_readonly/zoneid')+')'; 
				attribute<string> SSP:= ='union_data(.,'+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/country_agg_readonly/SSP')+')'; 
				attribute<uint32> Year:= ='union_data(.,'+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/country_agg_readonly/Year')+')'; 
				attribute<float32> 	avg_prev_14t21:= rjoin(zoneid, agg_to_countries/LabelText, agg_to_countries/m_obs_14t21);
				attribute<p5s>		p5_class:= rjoin(zoneid, agg_to_countries/LabelText, agg_to_countries/p5_class);
				
				container overlays_tot_2up:= ='for_each_nedv('+quote('tot_')+'+ sets/nm, replace(overlays_eval_ctr_tot, '+quote('XXXX')+', sets/trunc_nm), list_results, float32)';
				container overlays_tot_inform:= ='for_each_nedv('+quote('tot_')+'+ sets/nm, replace(overlays_eval_ctr_tot_inform, '+quote('XXXX')+', sets/trunc_nm), list_results, float32)';
				container overlays_tot_rf10:= ='for_each_nedv('+quote('tot_')+'+ sets/nm, replace(overlays_eval_ctr_tot_rf10, '+quote('XXXX')+', sets/trunc_nm), list_results, float32)';
				container overlays_urb:= ='for_each_nedv('+quote('urb_')+'+ sets/nm, replace(overlays_eval_ctr_urb, '+quote('XXXX')+', sets/trunc_nm), list_results, float32)';
			}
		}
		unit<uint32> agg_to_regions:= regions {
			attribute<string> 	LabelText:= 'z'+string(regions/admin_code);
			attribute<float32> 	ipc3plus_percent:= regions/ipc3plus_percent;
			attribute<p5s>		p5_class:= regions/p5_class_ctr;
			attribute<bool> 	p10th_regions:= p5_class < 2[p5s];
			attribute<bool> 	p20th_regions:= p5_class < 4[p5s];
			attribute<bool> 	p80th_regions:= p5_class > 15[p5s];
			attribute<bool> 	p90th_regions:= p5_class > 17[p5s];
			
			unit<uint32> list_results:= ='union_unit('+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/region_agg_readonly')+')' {
				attribute<string> zoneid:= ='union_data(.,'+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/region_agg_readonly/zoneid')+')'; 
				attribute<string> SSP:= ='union_data(.,'+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/region_agg_readonly/SSP')+')'; 
				attribute<uint32> Year:= ='union_data(.,'+AsItemList('gen_results_per_popgrid_tot/'+SSP_x_Years/Label+'/region_agg_readonly/Year')+')'; 
				attribute<float32> 	ipc3plus_percent:= rjoin(zoneid, agg_to_regions/LabelText, agg_to_regions/ipc3plus_percent);
				attribute<p5s>		p5_class:= rjoin(zoneid, agg_to_regions/LabelText, agg_to_regions/p5_class);
				
				container overlays_tot:= ='for_each_nedv('+quote('tot_')+'+ sets/nm, replace(overlays_eval_reg_tot, '+quote('XXXX')+', sets/trunc_nm), list_results, float32)';
				container overlays_urb:= ='for_each_nedv('+quote('urb_')+'+ sets/nm, replace(overlays_eval_reg_urb, '+quote('XXXX')+', sets/trunc_nm), list_results, float32)';
			}
		}
		
		Template do_tabulate_popresult {
			container inPop;
			parameter<string> Pop_layer:= '_totpop';
			parameter<string> ssp_x_year:= propvalue(., 'Name');
			parameter<string> SSP_name:= substr(ssp_x_year, 0, 4);
			parameter<uint32> Yr:=	uint32(substr(ssp_x_year, 5, 8));
			
			container overlays:= for_each_nedv(sets/nm, 'inPop/'+ssp_x_year+' * overlay_data/grids/set_grids/'+ssp_x_year+'_x_'+sets/nm, r2up, float32);
			
			container country_agg:= for_each_nedva(sets/nm, 'sum(overlays/'+overlay_data/sets/nm+', r2up/scntr_id)', sel_countries, float32, '%LocalDataProjDir%/countries_tabulation/'+Pop_layer+'/'+ssp_x_year+'.dbf') {attribute<string> zoneid (sel_countries):= sel_countries/Labeltext, storagename = "= '%LocalDataProjDir%/countries_tabulation/'+Pop_layer+'/'+ssp_x_year+'.dbf'";}
			container region_agg:= for_each_nedva(sets/nm, 'sum(overlays/'+overlay_data/sets/nm+', r2up/reg_id)', regions, float32, '%LocalDataProjDir%/regions_tabulation/'+Pop_layer+'/'+ssp_x_year+'.dbf') {attribute<string> zoneid (regions):= 'z'+string(regions/admin_code), storagename = "= '%LocalDataProjDir%/regions_tabulation/'+Pop_layer+'/'+ssp_x_year+'.dbf'";}
			
			unit<uint32> country_agg_readonly: storagename = "= propvalue(country_agg/zoneid, 'storagename')", storagereadonly = "true" {attribute<string> SSP:= const(SSP_name,.,string); attribute<uint32> Year:= const(Yr,.,uint32);}
			unit<uint32> region_agg_readonly: storagename = "= propvalue(region_agg/zoneid, 'storagename')", storagereadonly = "true"  {attribute<string> SSP:= const(SSP_name,.,string); attribute<uint32> Year:= const(Yr,.,uint32);}
			
		}
		
		
	}
	
	
}